Directory: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/export
FilePath: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/export/export-to-csv.php
Contents:
<?php

// Function to export logs to CSV
function export_logs_to_csv() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'page_visit_logs';

    // Set the filename with the current date
    $filename = 'page-visits-' . date('Ymd') . '.csv';

    // Set the header to download the file instead of displaying it
    header('Content-Type: text/csv');
    header('Content-Disposition: attachment; filename="' . $filename . '"');

    // Open PHP output stream as file
    $output = fopen('php://output', 'w');

    // Column headers in the CSV file
    fputcsv($output, ['Time', 'URL' , 'params', 'IP Address', 'Country', 'Region', 'City', 'ISP', 'Mobile']);

    // Fetch logs from the database
    $logs = $wpdb->get_results("SELECT * FROM $table_name ORDER BY time DESC", ARRAY_A);

    // Loop through each log entry and add it to the CSV
    foreach ($logs as $log) {
        fputcsv($output, [
            $log['time'],
            $log['url'],
            $log['params'],
            $log['ip'],
            $log['country'],
            $log['regionName'],
            $log['city'],
            $log['isp'],
            $log['mobile'] ? 'Yes' : 'No' // Assuming 'mobile' is stored as a boolean
        ]);
    }

    // Close the output stream
    fclose($output);
    exit;
}

// Check if the current request is for the CSV export
if (isset($_GET['action']) && $_GET['action'] == 'export_csv') {
    export_logs_to_csv();
}
?>

Directory: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/logger
FilePath: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/logger/class-page-visit-logger.php
Contents:
<?php
    class Page_Visit_Logger {
        // Adjust your plugin activation method to add geolocation columns to your table
        public static function plugin_activation() {
            global $wpdb;
            $table_name = $wpdb->prefix . 'page_visit_logs';
            $charset_collate = $wpdb->get_charset_collate();
    
            $sql = "CREATE TABLE $table_name (
                id mediumint(9) NOT NULL AUTO_INCREMENT,
                time datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
                url text NOT NULL,
                ip varchar(100) NOT NULL,
                params text NOT NULL,
                country varchar(100),
                regionName varchar(100),
                city varchar(100),
                zip varchar(20),
                lat float,
                lon float,
                isp varchar(100),
                org varchar(100),
                as_info varchar(100),
                mobile boolean,
                proxy boolean,
                hosting boolean,
                PRIMARY KEY  (id)
            ) $charset_collate;";
    
            require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
            dbDelta($sql);
        }
    
        // Method to fetch geolocation data from the IP API
        private static function fetch_geolocation_data($ip) {
            $api_url = "http://ip-api.com/json/$ip?fields=status,message,country,countryCode,region,regionName,city,district,zip,lat,lon,offset,isp,org,as,reverse,mobile,proxy,hosting";
            $response = wp_remote_get($api_url);
    
            if (is_wp_error($response)) {
                return false; // Bail early on error
            }
    
            $body = wp_remote_retrieve_body($response);
            $data = json_decode($body, true); // Decode JSON response into an associative array
    
            if ($data['status'] !== 'success') {
                return false; // Bail if the API did not return a success status
            }
    
            return $data;
        }
    
        // Adjust your log_visit method to include geolocation fetching and storing
        public static function log_visit() {
            global $wpdb;
            $table_name = $wpdb->prefix . 'page_visit_logs';
    
            $url = home_url(add_query_arg(null, null));
            $parsed_url = parse_url($url);
            $query_params = isset($parsed_url['query']) ? $parsed_url['query'] : 'None';
            $ip = $_SERVER['REMOTE_ADDR'];
            $current_time = current_time('mysql');
            $geolocationData = self::fetch_geolocation_data($ip);
    
            if ($geolocationData) {
                $wpdb->insert(
                    $table_name,
                    array(
                        'time' => $current_time,
                        'url' => $url,
                        'ip' => $ip,
                        'params' => $query_params,
                        'country' => $geolocationData['country'],
                        'regionName' => $geolocationData['regionName'],
                        'city' => $geolocationData['city'],
                        'zip' => $geolocationData['zip'],
                        'lat' => $geolocationData['lat'],
                        'lon' => $geolocationData['lon'],
                        'isp' => $geolocationData['isp'],
                        'org' => $geolocationData['org'],
                        'as_info' => $geolocationData['as'],
                        'mobile' => $geolocationData['mobile'],
                        'proxy' => $geolocationData['proxy'],
                        'hosting' => $geolocationData['hosting'],
                    )
                );
            }
        }
    // Method to retrieve visits for admin display, including pagination
    public static function get_visits($per_page = 100, $page_number = 1) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'page_visit_logs';

        $offset = ($page_number - 1) * $per_page;
        $query = $wpdb->prepare(
            "SELECT * FROM $table_name ORDER BY time DESC LIMIT %d, %d;",
            $offset, $per_page
        );

        $results = $wpdb->get_results($query);
        return $results;
    }
}

FilePath: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/page-visit-logger.php
Contents:
<?php
/**
 * Plugin Name: Page Visit Logger
 * Description: Logs page visits along with query parameters, IPs, and shows them in an admin dashboard, with export to CSV functionality.
 * Version: 1.0
 * Author: Aashika Goenka
 * Url: https://github.com/aaditya-cpu
 */

defined('ABSPATH') or die('No script kiddies please!');

define('PVL_PLUGIN_DIR', plugin_dir_path(__FILE__));

// Include the logger class file.
require_once PVL_PLUGIN_DIR . 'logger/class-page-visit-logger.php';

// Register activation hook to create the database table.
register_activation_hook(__FILE__, ['Page_Visit_Logger', 'plugin_activation']);

// Hook into WordPress to log page visits.
add_action('template_redirect', ['Page_Visit_Logger', 'log_visit']);

// Add an admin menu item for the plugin.
add_action('admin_menu', function() {
    add_menu_page(
        'Page Visit Logs',             // Page title
        'Visit Logs',                  // Menu title
        'manage_options',              // Capability required to see the page
        'page-visit-logger',           // Menu slug
        'pvl_admin_page_display',      // Function to display the admin page
        'dashicons-visibility',        // Icon URL
        6                              // Position in menu
    );
});

// Add action for admin_init to handle the CSV export.
add_action('admin_init', function() {
    if (isset($_GET['page']) && $_GET['page'] === 'page-visit-logger' && isset($_GET['action']) && $_GET['action'] === 'export_csv') {
        require_once PVL_PLUGIN_DIR . 'export/export-to-csv.php';
    }
});

// Function to display the admin dashboard page.
function pvl_admin_page_display() {
    include PVL_PLUGIN_DIR . 'views/admin-page.php';
}

FilePath: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/README.md
Contents:
Page Visit Logger
Description

The Page Visit Logger is a WordPress plugin designed to log and display page visits along with query parameters, IP addresses, and geolocation data in the WordPress admin dashboard. It also supports exporting the logs to CSV for further analysis.
Features

    Logs each page visit, including the date and time, URL visited, IP address, and query parameters.
    Retrieves geolocation data for each IP address, including country, region, city, ISP, and whether the access was from a mobile device.
    Displays logged visits in an admin dashboard with pagination.
    Export functionality to download the visit logs as a CSV file.

Installation

    Upload the page-visit-logger folder to the /wp-content/plugins/ directory.
    Activate the plugin through the 'Plugins' menu in WordPress.
    The "Visit Logs" menu in the admin dashboard will now be available to view and export page visit logs.

Usage

Navigate to the "Visit Logs" page in your WordPress admin dashboard to view the list of page visits. Each log entry includes the date and time of the visit, the URL visited, IP address, query parameters, and geolocation data. Use the pagination controls to navigate through the logs. Click the "Export to CSV" button to download the logs.
Requirements

    WordPress 5.0 or higher.
    PHP 7.2 or higher.

License

GPLv2 or later
Author

[Aaditya Goenka](https://github.com/aaditya-cpu)


Directory: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/views
FilePath: /opt/lampp/htdocs/draybarotraumas/wp-content/plugins/page-visit-logger/views/admin-page.php
Contents:
<?php
// Check user permissions
if (!current_user_can('manage_options')) {
  wp_die(__('You do not have sufficient permissions to access this page.'));
}

// Get current page number
$current_page = isset($_GET['paged']) ? max(1, intval($_GET['paged'])) : 1;

// Use the Page_Visit_Logger class to get visits
$visits = Page_Visit_Logger::get_visits(100, $current_page);

// Calculate total pages
global $wpdb;
$table_name = $wpdb->prefix . 'page_visit_logs';
$total_items = $wpdb->get_var("SELECT COUNT(id) FROM $table_name");
$total_pages = ceil($total_items / 100);
?>

<div class="wrap">
  <?php echo '<a href="' . esc_url(admin_url('admin.php?page=page-visit-logger&action=export_csv')) . '" class="button button-primary">Export as CSV</a>';?>
  <h1>Page Visit Logs</h1>
  <table class="wp-list-table widefat fixed striped">
    <thead>
      <tr>
        <th>Date & Time</th>
        <th>URL</th>
        <th>IP Address & Geolocation</th>
        <th>Parameters</th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($visits as $visit): ?>
        <tr>
            <td><?php echo esc_html($visit->time); ?></td>
            <td><?php echo esc_url($visit->url); ?></td>
            <td>
                <?php 
                echo esc_html($visit->ip);
                if (isset($visit->country) || isset($visit->city)) {
                    echo "<br>";
                    echo "Country: " . esc_html($visit->country ?? 'Unknown') . ", City: " . esc_html($visit->city ?? 'Unknown');
                }
                if (isset($visit->isp)) {
                    echo "<br>";
                    echo "ISP: " . esc_html($visit->isp);
                }
                if (isset($visit->mobile)) {
                    echo ", Mobile: " . (esc_html($visit->mobile) ? "Yes" : "No");
                }
                ?>
            </td>
            <td><?php echo esc_html($visit->params); ?></td>
        </tr>
      <?php endforeach; ?>
      <?php if (empty($visits)): ?>
        <tr>
            <td colspan="4">No visits logged yet.</td>
        </tr>
      <?php endif; ?>
    </tbody>
  </table>

  <?php if ($total_pages > 1): ?>
    <div class="tablenav">
      <div class="tablenav-pages">
        <span class="pagination-links">
          <?php if ($current_page > 1): ?>
            <a class="first-page button" href="?page=page-visit-logger&paged=1"><span class="screen-reader-text">First page</span></a>
            <a class="prev-page button" href="?page=page-visit-logger&paged=<?php echo $current_page - 1; ?>"><span class="screen-reader-text">Previous page</span></a>
          <?php endif; ?>
          <span class="paging-input">
            <label for="current-page-selector" class="screen-reader-text">Current Page</label>
            <input class="current-page" id="current-page-selector" type="text" name="paged" value="<?php echo $current_page; ?>" size="2" aria-describedby="table-paging"> of <span class="total-pages"><?php echo $total_pages; ?></span>
          </span>
          <?php if ($current_page < $total_pages): ?>
            <a class="next-page button" href="?page=page-visit-logger&paged=<?php echo $current_page + 1; ?>"><span class="screen-reader-text">Next page</span></a>
            <a class="last-page button" href="?page=page-visit-logger&paged=<?php echo $total_pages; ?>"><span class="screen-reader-text">Last page</span></a>
          <?php endif; ?>
        </span>
      </div>
    </div>
  <?php endif; ?>
</div>

